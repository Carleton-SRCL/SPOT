#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <cmath>  // For floor function

// PCA9685 registers and constants
#define PCA9685_MODE1        0x00
#define PCA9685_MODE2        0x01
#define PCA9685_PRESCALE     0xFE
#define PCA9685_LED0_ON_L    0x06
#define OSC_CLOCK            25000000.0
#define FREQUENCY            50.0

int initPCA9685(const char* device, int address) {
    int fd = open(device, O_RDWR);
    if (fd < 0) {
        perror("Failed to open I2C device");
        exit(1);
    }

    if (ioctl(fd, I2C_SLAVE, address) < 0) {
        perror("Failed to select I2C device");
        close(fd);
        exit(1);
    }

    // Reset PCA9685
    uint8_t reset_value = 0x00;
    write(fd, &reset_value, 1);
    std::cout << fd << std::endl;
    return fd;
}

void closePCA9685(int fd) {
    close(fd);
}

void setPWMFrequency(int fd, float freq) {
    float prescale_val = OSC_CLOCK / (4096 * freq) - 1;
    uint8_t prescale = floor(prescale_val + 0.5); 
    

    uint8_t old_mode;
    read(fd, &old_mode, 1);
    uint8_t new_mode = (old_mode & 0x7F) | 0x10; // sleep mode

    uint8_t data[2];

    data[0] = PCA9685_MODE1;
    data[1] = new_mode;
    write(fd, data, 2);

    data[0] = PCA9685_PRESCALE;
    data[1] = prescale;
    write(fd, data, 2);

    data[0] = PCA9685_MODE1;
    data[1] = old_mode;
    write(fd, data, 2);

    usleep(5000); // 5ms delay

    data[1] = old_mode | 0x80; // Restart
    write(fd, data, 2);
}

/*void setPWM(int fd, uint8_t channel, uint16_t on, uint16_t off) {
    uint8_t data[4];
    
    //std::cout << on << std::endl;
    //std::cout << off << std::endl;

    data[0] = PCA9685_LED0_ON_L + 4 * channel;
    data[1] = on & 0xFF;
    data[2] = on >> 8;
    data[3] = off & 0xFF;
    write(fd, data, 4);

    data[0] += 1;
    data[1] = off >> 8;
    write(fd, data, 2);
}
*/

uint16_t percentageToPWM(float percentage) {
    return static_cast<uint16_t>((percentage / 100.0) * 4095.0);
}

uint8_t readRegister(int fd, uint8_t reg) {
    if (write(fd, &reg, 1) != 1) {
        perror("Failed to write to I2C device");
        exit(1);
    }

    uint8_t value;
    if (read(fd, &value, 1) != 1) {
        perror("Failed to read from I2C device");
        exit(1);
    }
    return value;
}

void writeRegister(int fd, uint8_t reg, uint8_t value) {
    uint8_t data[2] = {reg, value};
    if (write(fd, data, 2) != 2) {
        perror("Failed to write to I2C device");
        exit(1);
    }
}

void setPWM(int fd, uint8_t channel, uint16_t on, uint16_t off) {
    writeRegister(fd, PCA9685_LED0_ON_L + 4 * channel, on & 0xFF);
    writeRegister(fd, PCA9685_LED0_ON_L + 4 * channel + 1, on >> 8);
    writeRegister(fd, PCA9685_LED0_ON_L + 4 * channel + 2, off & 0xFF);
    writeRegister(fd, PCA9685_LED0_ON_L + 4 * channel + 3, off >> 8);
}

void commandPWM(float PWM1,float PWM2,float PWM3,float PWM4,float PWM5,float PWM6,float PWM7,float PWM8) {
    int fd = initPCA9685("/dev/i2c-8", 0x40);
    /*
    setPWMFrequency(fd, FREQUENCY);
    
    float duties[8] = {PWM1,PWM2,PWM3,PWM4,PWM5,PWM6,PWM7,PWM8};

    for (int channel = 1; channel <= 8; channel++) {
        uint16_t pwmValue = dutyCycleToPWM(duties[channel - 1]);  // You should provide the definition for dutyCycleToPWM function
        setPWM(fd, channel, 0, pwmValue);
    }

    closePCA9685(fd);
    */
    float duties[8] = {PWM1,PWM2,PWM3,PWM4,PWM5,PWM6,PWM7,PWM8};
    // Set PWM values for channels 1 to 8
    for (int channel = 1; channel <= 8; channel++) {
        uint16_t pwmValue = percentageToPWM(50.0); 
        // For testing, we'll set each channel to a fixed duty cycle: ON at count 0 and OFF at count 1000.
        setPWM(fd, channel, 0, 1000);

        // Read back the ON and OFF values for each channel to verify
        uint8_t onLow = readRegister(fd, PCA9685_LED0_ON_L + 4 * channel);
        uint8_t onHigh = readRegister(fd, PCA9685_LED0_ON_L + 4 * channel + 1);
        uint16_t onValue = (onHigh << 8) | onLow;

        uint8_t offLow = readRegister(fd, PCA9685_LED0_ON_L + 4 * channel + 2);
        uint8_t offHigh = readRegister(fd, PCA9685_LED0_ON_L + 4 * channel + 3);
        uint16_t offValue = (offHigh << 8) | offLow;

        //std::cout << "Channel " << channel << ": ON Value = " << onValue << ", OFF Value = " << offValue << std::endl;
    }

    close(fd);
    return 0;
}
